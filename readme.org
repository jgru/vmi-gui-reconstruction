* vmi-reconstruct-gui
~vmi-reconstruct-gui~ is a reimplementation of Brendan Dolan-Gavitt's [[https://volatility-labs.blogspot.com/2012/10/movp-43-taking-screenshots-from-memory.html][Volatility screenshot-plugin]] using [[https://github.com/libvmi/libvmi][libvmi]] to reconstruct the GUI of a Windows 7-box running as a Xen-guest. It was developed as a draft and blueprint to incorporate GUI forensics into the black-box binary analysis system [[https://github.com/tklengyel/drakvuf][DRAKVUF]] in the future. 

This tools reconstructs each desktop, that could be found in the memory of a running guest, and shows it one after another as a wireframe. To advance the presented desktop, press any key. Note that, Windows houses a lot of empty desktops, so many of those wireframes will be blank, if there are no visible desktops. 
[[file:res/screenshot.png]]
** Dependencies 
~vmi-reconstruct-gui~ depends on the following libraries:
- libvmi
- libx11-dev
- glib 

Please make sure to install those and then run ~make~ from within this directory.

** Usage
To use this PoC determine the Xen domain identifier of the Win 7 VM in question and run the compiled binary as illustrated below: 

#+BEGIN_SRC shell
# Set name of the VM specified in its config file
VM_NAME="your-vm-name"

# Retrieve dom id 
DOM_ID=$(sudo xl list | grep $VM_NAME | awk '{print $2}')

# Set path to separately created intermediate symbol file 
$IST_FILE="/usr/local/share/vmi/windows7-sp1.json"

# Reconstruct the gui
sudo ./vmi-reconstruct-gui -d $DOM_ID -j $IST_FILE
#+END_SRC

** Background on the working of the tool

*** Procedure to receive windows
The following procedure is applied to reconstruct the GUI windows:

 1. Find all Window Stations (WinStas) 
    - Traverse linked list of _EPROCESS-structs
      - For each process:
	1. Find ThreadListHead
	2. Traverse linked list of _ETHREAD-structs
	   - Check, if current _ETHREAD is a GUI thread
	     This is done by using the TEB-struct in _KTHREAD, which houses a Win32ThreadInfo-struct, if it is a GUI thread
	     1) If current _ETHREAD is a GUI-thread:
		Retrieve pointer pwinsta to tagWINDOWSTATION-struct
	     2) If current _ETHREAD is not a GUI-thread, continue
 2. Parse each tagWINDOWSTATION-struct
    1. Retrieve session ID
    2. Retrieve atom table offset
    3. Retrieve flags (specifying, if interactive or not)
    4. Traverse all tagDESKTOP-structs associated with the winsta
       1. Find rpdesklist-pointer
       2. Traverse linked list of desktops by using their rpnext-pointers
 3. Get a list of all windows associated with a desktop in their Z-order (bottom to top)
    - For each interactive window station
      - For each associated desktop
	1. Find the root window
	   1. Find _DESKTOPINFO
	   2. Find spwnd (struct pointer to tagWND-struct)
	2. Allocate an empty list of windows
	3. Form a list of top windows by following pNextWindow of the tagWND-struct until NULL or seen 
	   1. Check the visibility of each windo (WS_VISIBLE-flag has to be set)
	      1. If not visible, continue
	      2. If visible, add to list of visible windows
	   2. Traverse list of visbile windows in reverse order
	      1. For each window in list, get child window and recurse to 3.3

After the depth-ordered list of the addresses to all visible tagWND-structs of a desktop is available, this list can be traverse and each tagWND-struct can be parsed. 
Most important aspects of a tagWND-struct are:


** References 
- https://libvmi.com/api/
- https://www.cc.gatech.edu/~brendan/volatility/
- https://resources.infosecinstitute.com/topic/windows-gui-forensics-session-objects-window-stations-and-desktop/
- https://reactos.org/wiki/Techwiki:Win32k/DESKTOP
- https://www.microsoftpressstore.com/articles/article.aspx?p=2233328&seqNum=4
- https://titanwolf.org/Network/Articles/Article?AID=0de2af5a-cff3-49f8-b7d6-c2f9369ff313#gsc.tab=0
